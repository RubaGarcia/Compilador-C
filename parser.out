Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> listLineas
Rule 2     listLineas -> Linea
Rule 3     listLineas -> Linea listLineas
Rule 4     Linea -> Expression
Rule 5     Linea -> Expression ;
Rule 6     Linea -> Imprimir
Rule 7     Linea -> Retorno
Rule 8     Linea -> Metodo
Rule 9     Linea -> Bucle
Rule 10    Bucle -> WHILE ( Expression ) { listLineas }
Rule 11    Expression -> OBJECTID ( listaExpresiones )
Rule 12    Expression -> OBJECTID ( )
Rule 13    Expression -> Expression OR Expression
Rule 14    Expression -> Expression AND Expression
Rule 15    Expression -> ! Expression
Rule 16    Expression -> Expression NE Expression
Rule 17    Expression -> Expression EQ Expression
Rule 18    Expression -> Expression GE Expression
Rule 19    Expression -> Expression > Expression
Rule 20    Expression -> Expression LE Expression
Rule 21    Expression -> Expression < Expression  [precedence=nonassoc, level=1]
Rule 22    Expression -> ( Expression )
Rule 23    Expression -> BREAK ;
Rule 24    Expression -> Expression / Expression  [precedence=left, level=3]
Rule 25    Expression -> Expression * Expression  [precedence=left, level=3]
Rule 26    Expression -> Expression - Expression  [precedence=left, level=2]
Rule 27    Expression -> Expression + Expression  [precedence=left, level=2]
Rule 28    Expression -> FLOAT_CONST
Rule 29    Expression -> CHAR_CONST
Rule 30    Expression -> INT_CONST
Rule 31    Expression -> OBJECTID
Rule 32    Expression -> OBJECTID = Expression ;
Rule 33    Expression -> tipo OBJECTID optAssign
Rule 34    Expression -> IF ( Expression ) { listLineas }
Rule 35    Expression -> IF ( Expression ) { listLineas } Continuacion
Rule 36    Continuacion -> ELSE { listLineas }
Rule 37    Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion
Rule 38    Continuacion -> ELSE IF ( Expression ) { listLineas }
Rule 39    Metodo -> tipo OBJECTID ( listaFormales ) { listLineas }
Rule 40    Metodo -> tipo OBJECTID ( ) { listLineas }
Rule 41    tipo -> VOID
Rule 42    tipo -> DOUBLE
Rule 43    tipo -> FLOAT
Rule 44    tipo -> CHAR
Rule 45    tipo -> INT
Rule 46    listaFormales -> Formal , listaFormales
Rule 47    listaFormales -> Formal
Rule 48    Formal -> tipo OBJECTID
Rule 49    Retorno -> RETURN ;
Rule 50    Retorno -> RETURN Expression ;
Rule 51    Imprimir -> PRINT ( STRING argumentos ) ;
Rule 52    Imprimir -> PRINT ( STRING ) ;
Rule 53    argumentos -> , Expression argumentos
Rule 54    argumentos -> , Expression
Rule 55    optAssign -> = Expression  [precedence=nonassoc, level=1]
Rule 56    optAssign -> <empty>
Rule 57    listaExpresiones -> Expression , listaExpresiones
Rule 58    listaExpresiones -> Expression

Unused terminals:

    EXTERN
    STRUCT
    STATIC
    SIGNED
    FOR
    REGISTER
    DO
    AUTO
    UNSIGNED
    CONTINUE
    SIZEOF
    UNION
    SHORT
    TYPEDEF
    VOLATILE
    DEFAULT
    ENUM
    GOTO
    LONG
    CONST
    SWITCH
    CASE

Terminals, with rules where they appear:

!                    : 15
(                    : 10 11 12 22 34 35 37 38 39 40 51 52
)                    : 10 11 12 22 34 35 37 38 39 40 51 52
*                    : 25
+                    : 27
,                    : 46 53 54 57
-                    : 26
/                    : 24
;                    : 5 23 32 49 50 51 52
<                    : 21
=                    : 32 55
>                    : 19
AND                  : 14
AUTO                 : 
BREAK                : 23
CASE                 : 
CHAR                 : 44
CHAR_CONST           : 29
CONST                : 
CONTINUE             : 
DEFAULT              : 
DO                   : 
DOUBLE               : 42
ELSE                 : 36 37 38
ENUM                 : 
EQ                   : 17
EXTERN               : 
FLOAT                : 43
FLOAT_CONST          : 28
FOR                  : 
GE                   : 18
GOTO                 : 
IF                   : 34 35 37 38
INT                  : 45
INT_CONST            : 30
LE                   : 20
LONG                 : 
NE                   : 16
OBJECTID             : 11 12 31 32 33 39 40 48
OR                   : 13
PRINT                : 51 52
REGISTER             : 
RETURN               : 49 50
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 51 52
STRUCT               : 
SWITCH               : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 41
VOLATILE             : 
WHILE                : 10
error                : 
{                    : 10 34 35 36 37 38 39 40
}                    : 10 34 35 36 37 38 39 40

Nonterminals, with rules where they appear:

Bucle                : 9
Continuacion         : 35 37
Expression           : 4 5 10 13 13 14 14 15 16 16 17 17 18 18 19 19 20 20 21 21 22 24 24 25 25 26 26 27 27 32 34 35 37 38 50 53 54 55 57 58
Formal               : 46 47
Imprimir             : 6
Linea                : 2 3
Metodo               : 8
Programa             : 0
Retorno              : 7
argumentos           : 51 53
listLineas           : 1 3 10 34 35 36 37 38 39 40
listaExpresiones     : 11 57
listaFormales        : 39 46
optAssign            : 33
tipo                 : 33 39 40 48


state 0

    (0) S' -> . Programa
    (1) Programa -> . listLineas
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Programa                       shift and go to state 1
    listLineas                     shift and go to state 2
    Linea                          shift and go to state 3
    Expression                     shift and go to state 4
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8
    tipo                           shift and go to state 16

state 1

    (0) S' -> Programa .


state 2

    (1) Programa -> listLineas .
    $end            reduce using rule 1 (Programa -> listLineas .)


state 3

    (2) listLineas -> Linea .
    (3) listLineas -> Linea . listLineas
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    $end            reduce using rule 2 (listLineas -> Linea .)
    }               reduce using rule 2 (listLineas -> Linea .)
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Linea                          shift and go to state 3
    listLineas                     shift and go to state 26
    Expression                     shift and go to state 4
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8
    tipo                           shift and go to state 16

state 4

    (4) Linea -> Expression .
    (5) Linea -> Expression . ;
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    OBJECTID        reduce using rule 4 (Linea -> Expression .)
    !               reduce using rule 4 (Linea -> Expression .)
    (               reduce using rule 4 (Linea -> Expression .)
    BREAK           reduce using rule 4 (Linea -> Expression .)
    FLOAT_CONST     reduce using rule 4 (Linea -> Expression .)
    CHAR_CONST      reduce using rule 4 (Linea -> Expression .)
    INT_CONST       reduce using rule 4 (Linea -> Expression .)
    IF              reduce using rule 4 (Linea -> Expression .)
    PRINT           reduce using rule 4 (Linea -> Expression .)
    RETURN          reduce using rule 4 (Linea -> Expression .)
    WHILE           reduce using rule 4 (Linea -> Expression .)
    VOID            reduce using rule 4 (Linea -> Expression .)
    DOUBLE          reduce using rule 4 (Linea -> Expression .)
    FLOAT           reduce using rule 4 (Linea -> Expression .)
    CHAR            reduce using rule 4 (Linea -> Expression .)
    INT             reduce using rule 4 (Linea -> Expression .)
    $end            reduce using rule 4 (Linea -> Expression .)
    }               reduce using rule 4 (Linea -> Expression .)
    ;               shift and go to state 27
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 5

    (6) Linea -> Imprimir .
    OBJECTID        reduce using rule 6 (Linea -> Imprimir .)
    !               reduce using rule 6 (Linea -> Imprimir .)
    (               reduce using rule 6 (Linea -> Imprimir .)
    BREAK           reduce using rule 6 (Linea -> Imprimir .)
    FLOAT_CONST     reduce using rule 6 (Linea -> Imprimir .)
    CHAR_CONST      reduce using rule 6 (Linea -> Imprimir .)
    INT_CONST       reduce using rule 6 (Linea -> Imprimir .)
    IF              reduce using rule 6 (Linea -> Imprimir .)
    PRINT           reduce using rule 6 (Linea -> Imprimir .)
    RETURN          reduce using rule 6 (Linea -> Imprimir .)
    WHILE           reduce using rule 6 (Linea -> Imprimir .)
    VOID            reduce using rule 6 (Linea -> Imprimir .)
    DOUBLE          reduce using rule 6 (Linea -> Imprimir .)
    FLOAT           reduce using rule 6 (Linea -> Imprimir .)
    CHAR            reduce using rule 6 (Linea -> Imprimir .)
    INT             reduce using rule 6 (Linea -> Imprimir .)
    $end            reduce using rule 6 (Linea -> Imprimir .)
    }               reduce using rule 6 (Linea -> Imprimir .)


state 6

    (7) Linea -> Retorno .
    OBJECTID        reduce using rule 7 (Linea -> Retorno .)
    !               reduce using rule 7 (Linea -> Retorno .)
    (               reduce using rule 7 (Linea -> Retorno .)
    BREAK           reduce using rule 7 (Linea -> Retorno .)
    FLOAT_CONST     reduce using rule 7 (Linea -> Retorno .)
    CHAR_CONST      reduce using rule 7 (Linea -> Retorno .)
    INT_CONST       reduce using rule 7 (Linea -> Retorno .)
    IF              reduce using rule 7 (Linea -> Retorno .)
    PRINT           reduce using rule 7 (Linea -> Retorno .)
    RETURN          reduce using rule 7 (Linea -> Retorno .)
    WHILE           reduce using rule 7 (Linea -> Retorno .)
    VOID            reduce using rule 7 (Linea -> Retorno .)
    DOUBLE          reduce using rule 7 (Linea -> Retorno .)
    FLOAT           reduce using rule 7 (Linea -> Retorno .)
    CHAR            reduce using rule 7 (Linea -> Retorno .)
    INT             reduce using rule 7 (Linea -> Retorno .)
    $end            reduce using rule 7 (Linea -> Retorno .)
    }               reduce using rule 7 (Linea -> Retorno .)


state 7

    (8) Linea -> Metodo .
    OBJECTID        reduce using rule 8 (Linea -> Metodo .)
    !               reduce using rule 8 (Linea -> Metodo .)
    (               reduce using rule 8 (Linea -> Metodo .)
    BREAK           reduce using rule 8 (Linea -> Metodo .)
    FLOAT_CONST     reduce using rule 8 (Linea -> Metodo .)
    CHAR_CONST      reduce using rule 8 (Linea -> Metodo .)
    INT_CONST       reduce using rule 8 (Linea -> Metodo .)
    IF              reduce using rule 8 (Linea -> Metodo .)
    PRINT           reduce using rule 8 (Linea -> Metodo .)
    RETURN          reduce using rule 8 (Linea -> Metodo .)
    WHILE           reduce using rule 8 (Linea -> Metodo .)
    VOID            reduce using rule 8 (Linea -> Metodo .)
    DOUBLE          reduce using rule 8 (Linea -> Metodo .)
    FLOAT           reduce using rule 8 (Linea -> Metodo .)
    CHAR            reduce using rule 8 (Linea -> Metodo .)
    INT             reduce using rule 8 (Linea -> Metodo .)
    $end            reduce using rule 8 (Linea -> Metodo .)
    }               reduce using rule 8 (Linea -> Metodo .)


state 8

    (9) Linea -> Bucle .
    OBJECTID        reduce using rule 9 (Linea -> Bucle .)
    !               reduce using rule 9 (Linea -> Bucle .)
    (               reduce using rule 9 (Linea -> Bucle .)
    BREAK           reduce using rule 9 (Linea -> Bucle .)
    FLOAT_CONST     reduce using rule 9 (Linea -> Bucle .)
    CHAR_CONST      reduce using rule 9 (Linea -> Bucle .)
    INT_CONST       reduce using rule 9 (Linea -> Bucle .)
    IF              reduce using rule 9 (Linea -> Bucle .)
    PRINT           reduce using rule 9 (Linea -> Bucle .)
    RETURN          reduce using rule 9 (Linea -> Bucle .)
    WHILE           reduce using rule 9 (Linea -> Bucle .)
    VOID            reduce using rule 9 (Linea -> Bucle .)
    DOUBLE          reduce using rule 9 (Linea -> Bucle .)
    FLOAT           reduce using rule 9 (Linea -> Bucle .)
    CHAR            reduce using rule 9 (Linea -> Bucle .)
    INT             reduce using rule 9 (Linea -> Bucle .)
    $end            reduce using rule 9 (Linea -> Bucle .)
    }               reduce using rule 9 (Linea -> Bucle .)


state 9

    (11) Expression -> OBJECTID . ( listaExpresiones )
    (12) Expression -> OBJECTID . ( )
    (31) Expression -> OBJECTID .
    (32) Expression -> OBJECTID . = Expression ;
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 40
    ;               reduce using rule 31 (Expression -> OBJECTID .)
    OR              reduce using rule 31 (Expression -> OBJECTID .)
    AND             reduce using rule 31 (Expression -> OBJECTID .)
    NE              reduce using rule 31 (Expression -> OBJECTID .)
    EQ              reduce using rule 31 (Expression -> OBJECTID .)
    GE              reduce using rule 31 (Expression -> OBJECTID .)
    >               reduce using rule 31 (Expression -> OBJECTID .)
    LE              reduce using rule 31 (Expression -> OBJECTID .)
    <               reduce using rule 31 (Expression -> OBJECTID .)
    /               reduce using rule 31 (Expression -> OBJECTID .)
    *               reduce using rule 31 (Expression -> OBJECTID .)
    -               reduce using rule 31 (Expression -> OBJECTID .)
    +               reduce using rule 31 (Expression -> OBJECTID .)
    OBJECTID        reduce using rule 31 (Expression -> OBJECTID .)
    !               reduce using rule 31 (Expression -> OBJECTID .)
    BREAK           reduce using rule 31 (Expression -> OBJECTID .)
    FLOAT_CONST     reduce using rule 31 (Expression -> OBJECTID .)
    CHAR_CONST      reduce using rule 31 (Expression -> OBJECTID .)
    INT_CONST       reduce using rule 31 (Expression -> OBJECTID .)
    IF              reduce using rule 31 (Expression -> OBJECTID .)
    PRINT           reduce using rule 31 (Expression -> OBJECTID .)
    RETURN          reduce using rule 31 (Expression -> OBJECTID .)
    WHILE           reduce using rule 31 (Expression -> OBJECTID .)
    VOID            reduce using rule 31 (Expression -> OBJECTID .)
    DOUBLE          reduce using rule 31 (Expression -> OBJECTID .)
    FLOAT           reduce using rule 31 (Expression -> OBJECTID .)
    CHAR            reduce using rule 31 (Expression -> OBJECTID .)
    INT             reduce using rule 31 (Expression -> OBJECTID .)
    $end            reduce using rule 31 (Expression -> OBJECTID .)
    }               reduce using rule 31 (Expression -> OBJECTID .)
    )               reduce using rule 31 (Expression -> OBJECTID .)
    ,               reduce using rule 31 (Expression -> OBJECTID .)
    =               shift and go to state 41


state 10

    (22) Expression -> ( . Expression )
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 42
    tipo                           shift and go to state 43

state 11

    (15) Expression -> ! . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 44
    tipo                           shift and go to state 43

state 12

    (23) Expression -> BREAK . ;
    ;               shift and go to state 45


state 13

    (28) Expression -> FLOAT_CONST .
    ;               reduce using rule 28 (Expression -> FLOAT_CONST .)
    OR              reduce using rule 28 (Expression -> FLOAT_CONST .)
    AND             reduce using rule 28 (Expression -> FLOAT_CONST .)
    NE              reduce using rule 28 (Expression -> FLOAT_CONST .)
    EQ              reduce using rule 28 (Expression -> FLOAT_CONST .)
    GE              reduce using rule 28 (Expression -> FLOAT_CONST .)
    >               reduce using rule 28 (Expression -> FLOAT_CONST .)
    LE              reduce using rule 28 (Expression -> FLOAT_CONST .)
    <               reduce using rule 28 (Expression -> FLOAT_CONST .)
    /               reduce using rule 28 (Expression -> FLOAT_CONST .)
    *               reduce using rule 28 (Expression -> FLOAT_CONST .)
    -               reduce using rule 28 (Expression -> FLOAT_CONST .)
    +               reduce using rule 28 (Expression -> FLOAT_CONST .)
    OBJECTID        reduce using rule 28 (Expression -> FLOAT_CONST .)
    !               reduce using rule 28 (Expression -> FLOAT_CONST .)
    (               reduce using rule 28 (Expression -> FLOAT_CONST .)
    BREAK           reduce using rule 28 (Expression -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 28 (Expression -> FLOAT_CONST .)
    CHAR_CONST      reduce using rule 28 (Expression -> FLOAT_CONST .)
    INT_CONST       reduce using rule 28 (Expression -> FLOAT_CONST .)
    IF              reduce using rule 28 (Expression -> FLOAT_CONST .)
    PRINT           reduce using rule 28 (Expression -> FLOAT_CONST .)
    RETURN          reduce using rule 28 (Expression -> FLOAT_CONST .)
    WHILE           reduce using rule 28 (Expression -> FLOAT_CONST .)
    VOID            reduce using rule 28 (Expression -> FLOAT_CONST .)
    DOUBLE          reduce using rule 28 (Expression -> FLOAT_CONST .)
    FLOAT           reduce using rule 28 (Expression -> FLOAT_CONST .)
    CHAR            reduce using rule 28 (Expression -> FLOAT_CONST .)
    INT             reduce using rule 28 (Expression -> FLOAT_CONST .)
    $end            reduce using rule 28 (Expression -> FLOAT_CONST .)
    }               reduce using rule 28 (Expression -> FLOAT_CONST .)
    )               reduce using rule 28 (Expression -> FLOAT_CONST .)
    ,               reduce using rule 28 (Expression -> FLOAT_CONST .)


state 14

    (29) Expression -> CHAR_CONST .
    ;               reduce using rule 29 (Expression -> CHAR_CONST .)
    OR              reduce using rule 29 (Expression -> CHAR_CONST .)
    AND             reduce using rule 29 (Expression -> CHAR_CONST .)
    NE              reduce using rule 29 (Expression -> CHAR_CONST .)
    EQ              reduce using rule 29 (Expression -> CHAR_CONST .)
    GE              reduce using rule 29 (Expression -> CHAR_CONST .)
    >               reduce using rule 29 (Expression -> CHAR_CONST .)
    LE              reduce using rule 29 (Expression -> CHAR_CONST .)
    <               reduce using rule 29 (Expression -> CHAR_CONST .)
    /               reduce using rule 29 (Expression -> CHAR_CONST .)
    *               reduce using rule 29 (Expression -> CHAR_CONST .)
    -               reduce using rule 29 (Expression -> CHAR_CONST .)
    +               reduce using rule 29 (Expression -> CHAR_CONST .)
    OBJECTID        reduce using rule 29 (Expression -> CHAR_CONST .)
    !               reduce using rule 29 (Expression -> CHAR_CONST .)
    (               reduce using rule 29 (Expression -> CHAR_CONST .)
    BREAK           reduce using rule 29 (Expression -> CHAR_CONST .)
    FLOAT_CONST     reduce using rule 29 (Expression -> CHAR_CONST .)
    CHAR_CONST      reduce using rule 29 (Expression -> CHAR_CONST .)
    INT_CONST       reduce using rule 29 (Expression -> CHAR_CONST .)
    IF              reduce using rule 29 (Expression -> CHAR_CONST .)
    PRINT           reduce using rule 29 (Expression -> CHAR_CONST .)
    RETURN          reduce using rule 29 (Expression -> CHAR_CONST .)
    WHILE           reduce using rule 29 (Expression -> CHAR_CONST .)
    VOID            reduce using rule 29 (Expression -> CHAR_CONST .)
    DOUBLE          reduce using rule 29 (Expression -> CHAR_CONST .)
    FLOAT           reduce using rule 29 (Expression -> CHAR_CONST .)
    CHAR            reduce using rule 29 (Expression -> CHAR_CONST .)
    INT             reduce using rule 29 (Expression -> CHAR_CONST .)
    $end            reduce using rule 29 (Expression -> CHAR_CONST .)
    }               reduce using rule 29 (Expression -> CHAR_CONST .)
    )               reduce using rule 29 (Expression -> CHAR_CONST .)
    ,               reduce using rule 29 (Expression -> CHAR_CONST .)


state 15

    (30) Expression -> INT_CONST .
    ;               reduce using rule 30 (Expression -> INT_CONST .)
    OR              reduce using rule 30 (Expression -> INT_CONST .)
    AND             reduce using rule 30 (Expression -> INT_CONST .)
    NE              reduce using rule 30 (Expression -> INT_CONST .)
    EQ              reduce using rule 30 (Expression -> INT_CONST .)
    GE              reduce using rule 30 (Expression -> INT_CONST .)
    >               reduce using rule 30 (Expression -> INT_CONST .)
    LE              reduce using rule 30 (Expression -> INT_CONST .)
    <               reduce using rule 30 (Expression -> INT_CONST .)
    /               reduce using rule 30 (Expression -> INT_CONST .)
    *               reduce using rule 30 (Expression -> INT_CONST .)
    -               reduce using rule 30 (Expression -> INT_CONST .)
    +               reduce using rule 30 (Expression -> INT_CONST .)
    OBJECTID        reduce using rule 30 (Expression -> INT_CONST .)
    !               reduce using rule 30 (Expression -> INT_CONST .)
    (               reduce using rule 30 (Expression -> INT_CONST .)
    BREAK           reduce using rule 30 (Expression -> INT_CONST .)
    FLOAT_CONST     reduce using rule 30 (Expression -> INT_CONST .)
    CHAR_CONST      reduce using rule 30 (Expression -> INT_CONST .)
    INT_CONST       reduce using rule 30 (Expression -> INT_CONST .)
    IF              reduce using rule 30 (Expression -> INT_CONST .)
    PRINT           reduce using rule 30 (Expression -> INT_CONST .)
    RETURN          reduce using rule 30 (Expression -> INT_CONST .)
    WHILE           reduce using rule 30 (Expression -> INT_CONST .)
    VOID            reduce using rule 30 (Expression -> INT_CONST .)
    DOUBLE          reduce using rule 30 (Expression -> INT_CONST .)
    FLOAT           reduce using rule 30 (Expression -> INT_CONST .)
    CHAR            reduce using rule 30 (Expression -> INT_CONST .)
    INT             reduce using rule 30 (Expression -> INT_CONST .)
    $end            reduce using rule 30 (Expression -> INT_CONST .)
    }               reduce using rule 30 (Expression -> INT_CONST .)
    )               reduce using rule 30 (Expression -> INT_CONST .)
    ,               reduce using rule 30 (Expression -> INT_CONST .)


state 16

    (33) Expression -> tipo . OBJECTID optAssign
    (39) Metodo -> tipo . OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> tipo . OBJECTID ( ) { listLineas }
    OBJECTID        shift and go to state 46


state 17

    (34) Expression -> IF . ( Expression ) { listLineas }
    (35) Expression -> IF . ( Expression ) { listLineas } Continuacion
    (               shift and go to state 47


state 18

    (51) Imprimir -> PRINT . ( STRING argumentos ) ;
    (52) Imprimir -> PRINT . ( STRING ) ;
    (               shift and go to state 48


state 19

    (49) Retorno -> RETURN . ;
    (50) Retorno -> RETURN . Expression ;
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    ;               shift and go to state 49
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 50
    tipo                           shift and go to state 43

state 20

    (10) Bucle -> WHILE . ( Expression ) { listLineas }
    (               shift and go to state 51


state 21

    (41) tipo -> VOID .
    OBJECTID        reduce using rule 41 (tipo -> VOID .)


state 22

    (42) tipo -> DOUBLE .
    OBJECTID        reduce using rule 42 (tipo -> DOUBLE .)


state 23

    (43) tipo -> FLOAT .
    OBJECTID        reduce using rule 43 (tipo -> FLOAT .)


state 24

    (44) tipo -> CHAR .
    OBJECTID        reduce using rule 44 (tipo -> CHAR .)


state 25

    (45) tipo -> INT .
    OBJECTID        reduce using rule 45 (tipo -> INT .)


state 26

    (3) listLineas -> Linea listLineas .
    $end            reduce using rule 3 (listLineas -> Linea listLineas .)
    }               reduce using rule 3 (listLineas -> Linea listLineas .)


state 27

    (5) Linea -> Expression ; .
    OBJECTID        reduce using rule 5 (Linea -> Expression ; .)
    !               reduce using rule 5 (Linea -> Expression ; .)
    (               reduce using rule 5 (Linea -> Expression ; .)
    BREAK           reduce using rule 5 (Linea -> Expression ; .)
    FLOAT_CONST     reduce using rule 5 (Linea -> Expression ; .)
    CHAR_CONST      reduce using rule 5 (Linea -> Expression ; .)
    INT_CONST       reduce using rule 5 (Linea -> Expression ; .)
    IF              reduce using rule 5 (Linea -> Expression ; .)
    PRINT           reduce using rule 5 (Linea -> Expression ; .)
    RETURN          reduce using rule 5 (Linea -> Expression ; .)
    WHILE           reduce using rule 5 (Linea -> Expression ; .)
    VOID            reduce using rule 5 (Linea -> Expression ; .)
    DOUBLE          reduce using rule 5 (Linea -> Expression ; .)
    FLOAT           reduce using rule 5 (Linea -> Expression ; .)
    CHAR            reduce using rule 5 (Linea -> Expression ; .)
    INT             reduce using rule 5 (Linea -> Expression ; .)
    $end            reduce using rule 5 (Linea -> Expression ; .)
    }               reduce using rule 5 (Linea -> Expression ; .)


state 28

    (13) Expression -> Expression OR . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 52
    tipo                           shift and go to state 43

state 29

    (14) Expression -> Expression AND . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 53
    tipo                           shift and go to state 43

state 30

    (16) Expression -> Expression NE . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 54
    tipo                           shift and go to state 43

state 31

    (17) Expression -> Expression EQ . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 55
    tipo                           shift and go to state 43

state 32

    (18) Expression -> Expression GE . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 56
    tipo                           shift and go to state 43

state 33

    (19) Expression -> Expression > . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 57
    tipo                           shift and go to state 43

state 34

    (20) Expression -> Expression LE . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 58
    tipo                           shift and go to state 43

state 35

    (21) Expression -> Expression < . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 59
    tipo                           shift and go to state 43

state 36

    (24) Expression -> Expression / . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 60
    tipo                           shift and go to state 43

state 37

    (25) Expression -> Expression * . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 61
    tipo                           shift and go to state 43

state 38

    (26) Expression -> Expression - . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 62
    tipo                           shift and go to state 43

state 39

    (27) Expression -> Expression + . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 63
    tipo                           shift and go to state 43

state 40

    (11) Expression -> OBJECTID ( . listaExpresiones )
    (12) Expression -> OBJECTID ( . )
    (57) listaExpresiones -> . Expression , listaExpresiones
    (58) listaExpresiones -> . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    )               shift and go to state 65
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    listaExpresiones               shift and go to state 64
    Expression                     shift and go to state 66
    tipo                           shift and go to state 43

state 41

    (32) Expression -> OBJECTID = . Expression ;
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 67
    tipo                           shift and go to state 43

state 42

    (22) Expression -> ( Expression . )
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    )               shift and go to state 68
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 43

    (33) Expression -> tipo . OBJECTID optAssign
    OBJECTID        shift and go to state 69


state 44

    (15) Expression -> ! Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 15 (Expression -> ! Expression .)
    OBJECTID        reduce using rule 15 (Expression -> ! Expression .)
    !               reduce using rule 15 (Expression -> ! Expression .)
    (               reduce using rule 15 (Expression -> ! Expression .)
    BREAK           reduce using rule 15 (Expression -> ! Expression .)
    FLOAT_CONST     reduce using rule 15 (Expression -> ! Expression .)
    CHAR_CONST      reduce using rule 15 (Expression -> ! Expression .)
    INT_CONST       reduce using rule 15 (Expression -> ! Expression .)
    IF              reduce using rule 15 (Expression -> ! Expression .)
    PRINT           reduce using rule 15 (Expression -> ! Expression .)
    RETURN          reduce using rule 15 (Expression -> ! Expression .)
    WHILE           reduce using rule 15 (Expression -> ! Expression .)
    VOID            reduce using rule 15 (Expression -> ! Expression .)
    DOUBLE          reduce using rule 15 (Expression -> ! Expression .)
    FLOAT           reduce using rule 15 (Expression -> ! Expression .)
    CHAR            reduce using rule 15 (Expression -> ! Expression .)
    INT             reduce using rule 15 (Expression -> ! Expression .)
    $end            reduce using rule 15 (Expression -> ! Expression .)
    }               reduce using rule 15 (Expression -> ! Expression .)
    )               reduce using rule 15 (Expression -> ! Expression .)
    ,               reduce using rule 15 (Expression -> ! Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 45

    (23) Expression -> BREAK ; .
    ;               reduce using rule 23 (Expression -> BREAK ; .)
    OR              reduce using rule 23 (Expression -> BREAK ; .)
    AND             reduce using rule 23 (Expression -> BREAK ; .)
    NE              reduce using rule 23 (Expression -> BREAK ; .)
    EQ              reduce using rule 23 (Expression -> BREAK ; .)
    GE              reduce using rule 23 (Expression -> BREAK ; .)
    >               reduce using rule 23 (Expression -> BREAK ; .)
    LE              reduce using rule 23 (Expression -> BREAK ; .)
    <               reduce using rule 23 (Expression -> BREAK ; .)
    /               reduce using rule 23 (Expression -> BREAK ; .)
    *               reduce using rule 23 (Expression -> BREAK ; .)
    -               reduce using rule 23 (Expression -> BREAK ; .)
    +               reduce using rule 23 (Expression -> BREAK ; .)
    OBJECTID        reduce using rule 23 (Expression -> BREAK ; .)
    !               reduce using rule 23 (Expression -> BREAK ; .)
    (               reduce using rule 23 (Expression -> BREAK ; .)
    BREAK           reduce using rule 23 (Expression -> BREAK ; .)
    FLOAT_CONST     reduce using rule 23 (Expression -> BREAK ; .)
    CHAR_CONST      reduce using rule 23 (Expression -> BREAK ; .)
    INT_CONST       reduce using rule 23 (Expression -> BREAK ; .)
    IF              reduce using rule 23 (Expression -> BREAK ; .)
    PRINT           reduce using rule 23 (Expression -> BREAK ; .)
    RETURN          reduce using rule 23 (Expression -> BREAK ; .)
    WHILE           reduce using rule 23 (Expression -> BREAK ; .)
    VOID            reduce using rule 23 (Expression -> BREAK ; .)
    DOUBLE          reduce using rule 23 (Expression -> BREAK ; .)
    FLOAT           reduce using rule 23 (Expression -> BREAK ; .)
    CHAR            reduce using rule 23 (Expression -> BREAK ; .)
    INT             reduce using rule 23 (Expression -> BREAK ; .)
    $end            reduce using rule 23 (Expression -> BREAK ; .)
    }               reduce using rule 23 (Expression -> BREAK ; .)
    )               reduce using rule 23 (Expression -> BREAK ; .)
    ,               reduce using rule 23 (Expression -> BREAK ; .)


state 46

    (33) Expression -> tipo OBJECTID . optAssign
    (39) Metodo -> tipo OBJECTID . ( listaFormales ) { listLineas }
    (40) Metodo -> tipo OBJECTID . ( ) { listLineas }
    (55) optAssign -> . = Expression
    (56) optAssign -> .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 71
    =               shift and go to state 72
    ;               reduce using rule 56 (optAssign -> .)
    OR              reduce using rule 56 (optAssign -> .)
    AND             reduce using rule 56 (optAssign -> .)
    NE              reduce using rule 56 (optAssign -> .)
    EQ              reduce using rule 56 (optAssign -> .)
    GE              reduce using rule 56 (optAssign -> .)
    >               reduce using rule 56 (optAssign -> .)
    LE              reduce using rule 56 (optAssign -> .)
    <               reduce using rule 56 (optAssign -> .)
    /               reduce using rule 56 (optAssign -> .)
    *               reduce using rule 56 (optAssign -> .)
    -               reduce using rule 56 (optAssign -> .)
    +               reduce using rule 56 (optAssign -> .)
    OBJECTID        reduce using rule 56 (optAssign -> .)
    !               reduce using rule 56 (optAssign -> .)
    BREAK           reduce using rule 56 (optAssign -> .)
    FLOAT_CONST     reduce using rule 56 (optAssign -> .)
    CHAR_CONST      reduce using rule 56 (optAssign -> .)
    INT_CONST       reduce using rule 56 (optAssign -> .)
    IF              reduce using rule 56 (optAssign -> .)
    PRINT           reduce using rule 56 (optAssign -> .)
    RETURN          reduce using rule 56 (optAssign -> .)
    WHILE           reduce using rule 56 (optAssign -> .)
    VOID            reduce using rule 56 (optAssign -> .)
    DOUBLE          reduce using rule 56 (optAssign -> .)
    FLOAT           reduce using rule 56 (optAssign -> .)
    CHAR            reduce using rule 56 (optAssign -> .)
    INT             reduce using rule 56 (optAssign -> .)
    $end            reduce using rule 56 (optAssign -> .)
    }               reduce using rule 56 (optAssign -> .)

    optAssign                      shift and go to state 70

state 47

    (34) Expression -> IF ( . Expression ) { listLineas }
    (35) Expression -> IF ( . Expression ) { listLineas } Continuacion
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 73
    tipo                           shift and go to state 43

state 48

    (51) Imprimir -> PRINT ( . STRING argumentos ) ;
    (52) Imprimir -> PRINT ( . STRING ) ;
    STRING          shift and go to state 74


state 49

    (49) Retorno -> RETURN ; .
    OBJECTID        reduce using rule 49 (Retorno -> RETURN ; .)
    !               reduce using rule 49 (Retorno -> RETURN ; .)
    (               reduce using rule 49 (Retorno -> RETURN ; .)
    BREAK           reduce using rule 49 (Retorno -> RETURN ; .)
    FLOAT_CONST     reduce using rule 49 (Retorno -> RETURN ; .)
    CHAR_CONST      reduce using rule 49 (Retorno -> RETURN ; .)
    INT_CONST       reduce using rule 49 (Retorno -> RETURN ; .)
    IF              reduce using rule 49 (Retorno -> RETURN ; .)
    PRINT           reduce using rule 49 (Retorno -> RETURN ; .)
    RETURN          reduce using rule 49 (Retorno -> RETURN ; .)
    WHILE           reduce using rule 49 (Retorno -> RETURN ; .)
    VOID            reduce using rule 49 (Retorno -> RETURN ; .)
    DOUBLE          reduce using rule 49 (Retorno -> RETURN ; .)
    FLOAT           reduce using rule 49 (Retorno -> RETURN ; .)
    CHAR            reduce using rule 49 (Retorno -> RETURN ; .)
    INT             reduce using rule 49 (Retorno -> RETURN ; .)
    $end            reduce using rule 49 (Retorno -> RETURN ; .)
    }               reduce using rule 49 (Retorno -> RETURN ; .)


state 50

    (50) Retorno -> RETURN Expression . ;
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               shift and go to state 75
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 51

    (10) Bucle -> WHILE ( . Expression ) { listLineas }
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 76
    tipo                           shift and go to state 43

state 52

    (13) Expression -> Expression OR Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 13 (Expression -> Expression OR Expression .)
    OBJECTID        reduce using rule 13 (Expression -> Expression OR Expression .)
    !               reduce using rule 13 (Expression -> Expression OR Expression .)
    (               reduce using rule 13 (Expression -> Expression OR Expression .)
    BREAK           reduce using rule 13 (Expression -> Expression OR Expression .)
    FLOAT_CONST     reduce using rule 13 (Expression -> Expression OR Expression .)
    CHAR_CONST      reduce using rule 13 (Expression -> Expression OR Expression .)
    INT_CONST       reduce using rule 13 (Expression -> Expression OR Expression .)
    IF              reduce using rule 13 (Expression -> Expression OR Expression .)
    PRINT           reduce using rule 13 (Expression -> Expression OR Expression .)
    RETURN          reduce using rule 13 (Expression -> Expression OR Expression .)
    WHILE           reduce using rule 13 (Expression -> Expression OR Expression .)
    VOID            reduce using rule 13 (Expression -> Expression OR Expression .)
    DOUBLE          reduce using rule 13 (Expression -> Expression OR Expression .)
    FLOAT           reduce using rule 13 (Expression -> Expression OR Expression .)
    CHAR            reduce using rule 13 (Expression -> Expression OR Expression .)
    INT             reduce using rule 13 (Expression -> Expression OR Expression .)
    $end            reduce using rule 13 (Expression -> Expression OR Expression .)
    }               reduce using rule 13 (Expression -> Expression OR Expression .)
    )               reduce using rule 13 (Expression -> Expression OR Expression .)
    ,               reduce using rule 13 (Expression -> Expression OR Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 53

    (14) Expression -> Expression AND Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 14 (Expression -> Expression AND Expression .)
    OBJECTID        reduce using rule 14 (Expression -> Expression AND Expression .)
    !               reduce using rule 14 (Expression -> Expression AND Expression .)
    (               reduce using rule 14 (Expression -> Expression AND Expression .)
    BREAK           reduce using rule 14 (Expression -> Expression AND Expression .)
    FLOAT_CONST     reduce using rule 14 (Expression -> Expression AND Expression .)
    CHAR_CONST      reduce using rule 14 (Expression -> Expression AND Expression .)
    INT_CONST       reduce using rule 14 (Expression -> Expression AND Expression .)
    IF              reduce using rule 14 (Expression -> Expression AND Expression .)
    PRINT           reduce using rule 14 (Expression -> Expression AND Expression .)
    RETURN          reduce using rule 14 (Expression -> Expression AND Expression .)
    WHILE           reduce using rule 14 (Expression -> Expression AND Expression .)
    VOID            reduce using rule 14 (Expression -> Expression AND Expression .)
    DOUBLE          reduce using rule 14 (Expression -> Expression AND Expression .)
    FLOAT           reduce using rule 14 (Expression -> Expression AND Expression .)
    CHAR            reduce using rule 14 (Expression -> Expression AND Expression .)
    INT             reduce using rule 14 (Expression -> Expression AND Expression .)
    $end            reduce using rule 14 (Expression -> Expression AND Expression .)
    }               reduce using rule 14 (Expression -> Expression AND Expression .)
    )               reduce using rule 14 (Expression -> Expression AND Expression .)
    ,               reduce using rule 14 (Expression -> Expression AND Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 54

    (16) Expression -> Expression NE Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 16 (Expression -> Expression NE Expression .)
    OBJECTID        reduce using rule 16 (Expression -> Expression NE Expression .)
    !               reduce using rule 16 (Expression -> Expression NE Expression .)
    (               reduce using rule 16 (Expression -> Expression NE Expression .)
    BREAK           reduce using rule 16 (Expression -> Expression NE Expression .)
    FLOAT_CONST     reduce using rule 16 (Expression -> Expression NE Expression .)
    CHAR_CONST      reduce using rule 16 (Expression -> Expression NE Expression .)
    INT_CONST       reduce using rule 16 (Expression -> Expression NE Expression .)
    IF              reduce using rule 16 (Expression -> Expression NE Expression .)
    PRINT           reduce using rule 16 (Expression -> Expression NE Expression .)
    RETURN          reduce using rule 16 (Expression -> Expression NE Expression .)
    WHILE           reduce using rule 16 (Expression -> Expression NE Expression .)
    VOID            reduce using rule 16 (Expression -> Expression NE Expression .)
    DOUBLE          reduce using rule 16 (Expression -> Expression NE Expression .)
    FLOAT           reduce using rule 16 (Expression -> Expression NE Expression .)
    CHAR            reduce using rule 16 (Expression -> Expression NE Expression .)
    INT             reduce using rule 16 (Expression -> Expression NE Expression .)
    $end            reduce using rule 16 (Expression -> Expression NE Expression .)
    }               reduce using rule 16 (Expression -> Expression NE Expression .)
    )               reduce using rule 16 (Expression -> Expression NE Expression .)
    ,               reduce using rule 16 (Expression -> Expression NE Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 55

    (17) Expression -> Expression EQ Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 17 (Expression -> Expression EQ Expression .)
    OBJECTID        reduce using rule 17 (Expression -> Expression EQ Expression .)
    !               reduce using rule 17 (Expression -> Expression EQ Expression .)
    (               reduce using rule 17 (Expression -> Expression EQ Expression .)
    BREAK           reduce using rule 17 (Expression -> Expression EQ Expression .)
    FLOAT_CONST     reduce using rule 17 (Expression -> Expression EQ Expression .)
    CHAR_CONST      reduce using rule 17 (Expression -> Expression EQ Expression .)
    INT_CONST       reduce using rule 17 (Expression -> Expression EQ Expression .)
    IF              reduce using rule 17 (Expression -> Expression EQ Expression .)
    PRINT           reduce using rule 17 (Expression -> Expression EQ Expression .)
    RETURN          reduce using rule 17 (Expression -> Expression EQ Expression .)
    WHILE           reduce using rule 17 (Expression -> Expression EQ Expression .)
    VOID            reduce using rule 17 (Expression -> Expression EQ Expression .)
    DOUBLE          reduce using rule 17 (Expression -> Expression EQ Expression .)
    FLOAT           reduce using rule 17 (Expression -> Expression EQ Expression .)
    CHAR            reduce using rule 17 (Expression -> Expression EQ Expression .)
    INT             reduce using rule 17 (Expression -> Expression EQ Expression .)
    $end            reduce using rule 17 (Expression -> Expression EQ Expression .)
    }               reduce using rule 17 (Expression -> Expression EQ Expression .)
    )               reduce using rule 17 (Expression -> Expression EQ Expression .)
    ,               reduce using rule 17 (Expression -> Expression EQ Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 56

    (18) Expression -> Expression GE Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 18 (Expression -> Expression GE Expression .)
    OBJECTID        reduce using rule 18 (Expression -> Expression GE Expression .)
    !               reduce using rule 18 (Expression -> Expression GE Expression .)
    (               reduce using rule 18 (Expression -> Expression GE Expression .)
    BREAK           reduce using rule 18 (Expression -> Expression GE Expression .)
    FLOAT_CONST     reduce using rule 18 (Expression -> Expression GE Expression .)
    CHAR_CONST      reduce using rule 18 (Expression -> Expression GE Expression .)
    INT_CONST       reduce using rule 18 (Expression -> Expression GE Expression .)
    IF              reduce using rule 18 (Expression -> Expression GE Expression .)
    PRINT           reduce using rule 18 (Expression -> Expression GE Expression .)
    RETURN          reduce using rule 18 (Expression -> Expression GE Expression .)
    WHILE           reduce using rule 18 (Expression -> Expression GE Expression .)
    VOID            reduce using rule 18 (Expression -> Expression GE Expression .)
    DOUBLE          reduce using rule 18 (Expression -> Expression GE Expression .)
    FLOAT           reduce using rule 18 (Expression -> Expression GE Expression .)
    CHAR            reduce using rule 18 (Expression -> Expression GE Expression .)
    INT             reduce using rule 18 (Expression -> Expression GE Expression .)
    $end            reduce using rule 18 (Expression -> Expression GE Expression .)
    }               reduce using rule 18 (Expression -> Expression GE Expression .)
    )               reduce using rule 18 (Expression -> Expression GE Expression .)
    ,               reduce using rule 18 (Expression -> Expression GE Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 57

    (19) Expression -> Expression > Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 19 (Expression -> Expression > Expression .)
    OBJECTID        reduce using rule 19 (Expression -> Expression > Expression .)
    !               reduce using rule 19 (Expression -> Expression > Expression .)
    (               reduce using rule 19 (Expression -> Expression > Expression .)
    BREAK           reduce using rule 19 (Expression -> Expression > Expression .)
    FLOAT_CONST     reduce using rule 19 (Expression -> Expression > Expression .)
    CHAR_CONST      reduce using rule 19 (Expression -> Expression > Expression .)
    INT_CONST       reduce using rule 19 (Expression -> Expression > Expression .)
    IF              reduce using rule 19 (Expression -> Expression > Expression .)
    PRINT           reduce using rule 19 (Expression -> Expression > Expression .)
    RETURN          reduce using rule 19 (Expression -> Expression > Expression .)
    WHILE           reduce using rule 19 (Expression -> Expression > Expression .)
    VOID            reduce using rule 19 (Expression -> Expression > Expression .)
    DOUBLE          reduce using rule 19 (Expression -> Expression > Expression .)
    FLOAT           reduce using rule 19 (Expression -> Expression > Expression .)
    CHAR            reduce using rule 19 (Expression -> Expression > Expression .)
    INT             reduce using rule 19 (Expression -> Expression > Expression .)
    $end            reduce using rule 19 (Expression -> Expression > Expression .)
    }               reduce using rule 19 (Expression -> Expression > Expression .)
    )               reduce using rule 19 (Expression -> Expression > Expression .)
    ,               reduce using rule 19 (Expression -> Expression > Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 58

    (20) Expression -> Expression LE Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ;               reduce using rule 20 (Expression -> Expression LE Expression .)
    OBJECTID        reduce using rule 20 (Expression -> Expression LE Expression .)
    !               reduce using rule 20 (Expression -> Expression LE Expression .)
    (               reduce using rule 20 (Expression -> Expression LE Expression .)
    BREAK           reduce using rule 20 (Expression -> Expression LE Expression .)
    FLOAT_CONST     reduce using rule 20 (Expression -> Expression LE Expression .)
    CHAR_CONST      reduce using rule 20 (Expression -> Expression LE Expression .)
    INT_CONST       reduce using rule 20 (Expression -> Expression LE Expression .)
    IF              reduce using rule 20 (Expression -> Expression LE Expression .)
    PRINT           reduce using rule 20 (Expression -> Expression LE Expression .)
    RETURN          reduce using rule 20 (Expression -> Expression LE Expression .)
    WHILE           reduce using rule 20 (Expression -> Expression LE Expression .)
    VOID            reduce using rule 20 (Expression -> Expression LE Expression .)
    DOUBLE          reduce using rule 20 (Expression -> Expression LE Expression .)
    FLOAT           reduce using rule 20 (Expression -> Expression LE Expression .)
    CHAR            reduce using rule 20 (Expression -> Expression LE Expression .)
    INT             reduce using rule 20 (Expression -> Expression LE Expression .)
    $end            reduce using rule 20 (Expression -> Expression LE Expression .)
    }               reduce using rule 20 (Expression -> Expression LE Expression .)
    )               reduce using rule 20 (Expression -> Expression LE Expression .)
    ,               reduce using rule 20 (Expression -> Expression LE Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 59

    (21) Expression -> Expression < Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               reduce using rule 21 (Expression -> Expression < Expression .)
    OR              reduce using rule 21 (Expression -> Expression < Expression .)
    AND             reduce using rule 21 (Expression -> Expression < Expression .)
    NE              reduce using rule 21 (Expression -> Expression < Expression .)
    EQ              reduce using rule 21 (Expression -> Expression < Expression .)
    GE              reduce using rule 21 (Expression -> Expression < Expression .)
    >               reduce using rule 21 (Expression -> Expression < Expression .)
    LE              reduce using rule 21 (Expression -> Expression < Expression .)
    <               reduce using rule 21 (Expression -> Expression < Expression .)
    OBJECTID        reduce using rule 21 (Expression -> Expression < Expression .)
    !               reduce using rule 21 (Expression -> Expression < Expression .)
    (               reduce using rule 21 (Expression -> Expression < Expression .)
    BREAK           reduce using rule 21 (Expression -> Expression < Expression .)
    FLOAT_CONST     reduce using rule 21 (Expression -> Expression < Expression .)
    CHAR_CONST      reduce using rule 21 (Expression -> Expression < Expression .)
    INT_CONST       reduce using rule 21 (Expression -> Expression < Expression .)
    IF              reduce using rule 21 (Expression -> Expression < Expression .)
    PRINT           reduce using rule 21 (Expression -> Expression < Expression .)
    RETURN          reduce using rule 21 (Expression -> Expression < Expression .)
    WHILE           reduce using rule 21 (Expression -> Expression < Expression .)
    VOID            reduce using rule 21 (Expression -> Expression < Expression .)
    DOUBLE          reduce using rule 21 (Expression -> Expression < Expression .)
    FLOAT           reduce using rule 21 (Expression -> Expression < Expression .)
    CHAR            reduce using rule 21 (Expression -> Expression < Expression .)
    INT             reduce using rule 21 (Expression -> Expression < Expression .)
    $end            reduce using rule 21 (Expression -> Expression < Expression .)
    }               reduce using rule 21 (Expression -> Expression < Expression .)
    )               reduce using rule 21 (Expression -> Expression < Expression .)
    ,               reduce using rule 21 (Expression -> Expression < Expression .)
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 60

    (24) Expression -> Expression / Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               reduce using rule 24 (Expression -> Expression / Expression .)
    OR              reduce using rule 24 (Expression -> Expression / Expression .)
    AND             reduce using rule 24 (Expression -> Expression / Expression .)
    NE              reduce using rule 24 (Expression -> Expression / Expression .)
    EQ              reduce using rule 24 (Expression -> Expression / Expression .)
    GE              reduce using rule 24 (Expression -> Expression / Expression .)
    >               reduce using rule 24 (Expression -> Expression / Expression .)
    LE              reduce using rule 24 (Expression -> Expression / Expression .)
    <               reduce using rule 24 (Expression -> Expression / Expression .)
    /               reduce using rule 24 (Expression -> Expression / Expression .)
    *               reduce using rule 24 (Expression -> Expression / Expression .)
    -               reduce using rule 24 (Expression -> Expression / Expression .)
    +               reduce using rule 24 (Expression -> Expression / Expression .)
    OBJECTID        reduce using rule 24 (Expression -> Expression / Expression .)
    !               reduce using rule 24 (Expression -> Expression / Expression .)
    (               reduce using rule 24 (Expression -> Expression / Expression .)
    BREAK           reduce using rule 24 (Expression -> Expression / Expression .)
    FLOAT_CONST     reduce using rule 24 (Expression -> Expression / Expression .)
    CHAR_CONST      reduce using rule 24 (Expression -> Expression / Expression .)
    INT_CONST       reduce using rule 24 (Expression -> Expression / Expression .)
    IF              reduce using rule 24 (Expression -> Expression / Expression .)
    PRINT           reduce using rule 24 (Expression -> Expression / Expression .)
    RETURN          reduce using rule 24 (Expression -> Expression / Expression .)
    WHILE           reduce using rule 24 (Expression -> Expression / Expression .)
    VOID            reduce using rule 24 (Expression -> Expression / Expression .)
    DOUBLE          reduce using rule 24 (Expression -> Expression / Expression .)
    FLOAT           reduce using rule 24 (Expression -> Expression / Expression .)
    CHAR            reduce using rule 24 (Expression -> Expression / Expression .)
    INT             reduce using rule 24 (Expression -> Expression / Expression .)
    $end            reduce using rule 24 (Expression -> Expression / Expression .)
    }               reduce using rule 24 (Expression -> Expression / Expression .)
    )               reduce using rule 24 (Expression -> Expression / Expression .)
    ,               reduce using rule 24 (Expression -> Expression / Expression .)


state 61

    (25) Expression -> Expression * Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               reduce using rule 25 (Expression -> Expression * Expression .)
    OR              reduce using rule 25 (Expression -> Expression * Expression .)
    AND             reduce using rule 25 (Expression -> Expression * Expression .)
    NE              reduce using rule 25 (Expression -> Expression * Expression .)
    EQ              reduce using rule 25 (Expression -> Expression * Expression .)
    GE              reduce using rule 25 (Expression -> Expression * Expression .)
    >               reduce using rule 25 (Expression -> Expression * Expression .)
    LE              reduce using rule 25 (Expression -> Expression * Expression .)
    <               reduce using rule 25 (Expression -> Expression * Expression .)
    /               reduce using rule 25 (Expression -> Expression * Expression .)
    *               reduce using rule 25 (Expression -> Expression * Expression .)
    -               reduce using rule 25 (Expression -> Expression * Expression .)
    +               reduce using rule 25 (Expression -> Expression * Expression .)
    OBJECTID        reduce using rule 25 (Expression -> Expression * Expression .)
    !               reduce using rule 25 (Expression -> Expression * Expression .)
    (               reduce using rule 25 (Expression -> Expression * Expression .)
    BREAK           reduce using rule 25 (Expression -> Expression * Expression .)
    FLOAT_CONST     reduce using rule 25 (Expression -> Expression * Expression .)
    CHAR_CONST      reduce using rule 25 (Expression -> Expression * Expression .)
    INT_CONST       reduce using rule 25 (Expression -> Expression * Expression .)
    IF              reduce using rule 25 (Expression -> Expression * Expression .)
    PRINT           reduce using rule 25 (Expression -> Expression * Expression .)
    RETURN          reduce using rule 25 (Expression -> Expression * Expression .)
    WHILE           reduce using rule 25 (Expression -> Expression * Expression .)
    VOID            reduce using rule 25 (Expression -> Expression * Expression .)
    DOUBLE          reduce using rule 25 (Expression -> Expression * Expression .)
    FLOAT           reduce using rule 25 (Expression -> Expression * Expression .)
    CHAR            reduce using rule 25 (Expression -> Expression * Expression .)
    INT             reduce using rule 25 (Expression -> Expression * Expression .)
    $end            reduce using rule 25 (Expression -> Expression * Expression .)
    }               reduce using rule 25 (Expression -> Expression * Expression .)
    )               reduce using rule 25 (Expression -> Expression * Expression .)
    ,               reduce using rule 25 (Expression -> Expression * Expression .)


state 62

    (26) Expression -> Expression - Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               reduce using rule 26 (Expression -> Expression - Expression .)
    OR              reduce using rule 26 (Expression -> Expression - Expression .)
    AND             reduce using rule 26 (Expression -> Expression - Expression .)
    NE              reduce using rule 26 (Expression -> Expression - Expression .)
    EQ              reduce using rule 26 (Expression -> Expression - Expression .)
    GE              reduce using rule 26 (Expression -> Expression - Expression .)
    >               reduce using rule 26 (Expression -> Expression - Expression .)
    LE              reduce using rule 26 (Expression -> Expression - Expression .)
    <               reduce using rule 26 (Expression -> Expression - Expression .)
    -               reduce using rule 26 (Expression -> Expression - Expression .)
    +               reduce using rule 26 (Expression -> Expression - Expression .)
    OBJECTID        reduce using rule 26 (Expression -> Expression - Expression .)
    !               reduce using rule 26 (Expression -> Expression - Expression .)
    (               reduce using rule 26 (Expression -> Expression - Expression .)
    BREAK           reduce using rule 26 (Expression -> Expression - Expression .)
    FLOAT_CONST     reduce using rule 26 (Expression -> Expression - Expression .)
    CHAR_CONST      reduce using rule 26 (Expression -> Expression - Expression .)
    INT_CONST       reduce using rule 26 (Expression -> Expression - Expression .)
    IF              reduce using rule 26 (Expression -> Expression - Expression .)
    PRINT           reduce using rule 26 (Expression -> Expression - Expression .)
    RETURN          reduce using rule 26 (Expression -> Expression - Expression .)
    WHILE           reduce using rule 26 (Expression -> Expression - Expression .)
    VOID            reduce using rule 26 (Expression -> Expression - Expression .)
    DOUBLE          reduce using rule 26 (Expression -> Expression - Expression .)
    FLOAT           reduce using rule 26 (Expression -> Expression - Expression .)
    CHAR            reduce using rule 26 (Expression -> Expression - Expression .)
    INT             reduce using rule 26 (Expression -> Expression - Expression .)
    $end            reduce using rule 26 (Expression -> Expression - Expression .)
    }               reduce using rule 26 (Expression -> Expression - Expression .)
    )               reduce using rule 26 (Expression -> Expression - Expression .)
    ,               reduce using rule 26 (Expression -> Expression - Expression .)
    /               shift and go to state 36
    *               shift and go to state 37


state 63

    (27) Expression -> Expression + Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               reduce using rule 27 (Expression -> Expression + Expression .)
    OR              reduce using rule 27 (Expression -> Expression + Expression .)
    AND             reduce using rule 27 (Expression -> Expression + Expression .)
    NE              reduce using rule 27 (Expression -> Expression + Expression .)
    EQ              reduce using rule 27 (Expression -> Expression + Expression .)
    GE              reduce using rule 27 (Expression -> Expression + Expression .)
    >               reduce using rule 27 (Expression -> Expression + Expression .)
    LE              reduce using rule 27 (Expression -> Expression + Expression .)
    <               reduce using rule 27 (Expression -> Expression + Expression .)
    -               reduce using rule 27 (Expression -> Expression + Expression .)
    +               reduce using rule 27 (Expression -> Expression + Expression .)
    OBJECTID        reduce using rule 27 (Expression -> Expression + Expression .)
    !               reduce using rule 27 (Expression -> Expression + Expression .)
    (               reduce using rule 27 (Expression -> Expression + Expression .)
    BREAK           reduce using rule 27 (Expression -> Expression + Expression .)
    FLOAT_CONST     reduce using rule 27 (Expression -> Expression + Expression .)
    CHAR_CONST      reduce using rule 27 (Expression -> Expression + Expression .)
    INT_CONST       reduce using rule 27 (Expression -> Expression + Expression .)
    IF              reduce using rule 27 (Expression -> Expression + Expression .)
    PRINT           reduce using rule 27 (Expression -> Expression + Expression .)
    RETURN          reduce using rule 27 (Expression -> Expression + Expression .)
    WHILE           reduce using rule 27 (Expression -> Expression + Expression .)
    VOID            reduce using rule 27 (Expression -> Expression + Expression .)
    DOUBLE          reduce using rule 27 (Expression -> Expression + Expression .)
    FLOAT           reduce using rule 27 (Expression -> Expression + Expression .)
    CHAR            reduce using rule 27 (Expression -> Expression + Expression .)
    INT             reduce using rule 27 (Expression -> Expression + Expression .)
    $end            reduce using rule 27 (Expression -> Expression + Expression .)
    }               reduce using rule 27 (Expression -> Expression + Expression .)
    )               reduce using rule 27 (Expression -> Expression + Expression .)
    ,               reduce using rule 27 (Expression -> Expression + Expression .)
    /               shift and go to state 36
    *               shift and go to state 37


state 64

    (11) Expression -> OBJECTID ( listaExpresiones . )
    )               shift and go to state 77


state 65

    (12) Expression -> OBJECTID ( ) .
    ;               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    OR              reduce using rule 12 (Expression -> OBJECTID ( ) .)
    AND             reduce using rule 12 (Expression -> OBJECTID ( ) .)
    NE              reduce using rule 12 (Expression -> OBJECTID ( ) .)
    EQ              reduce using rule 12 (Expression -> OBJECTID ( ) .)
    GE              reduce using rule 12 (Expression -> OBJECTID ( ) .)
    >               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    LE              reduce using rule 12 (Expression -> OBJECTID ( ) .)
    <               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    /               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    *               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    -               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    +               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    OBJECTID        reduce using rule 12 (Expression -> OBJECTID ( ) .)
    !               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    (               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    BREAK           reduce using rule 12 (Expression -> OBJECTID ( ) .)
    FLOAT_CONST     reduce using rule 12 (Expression -> OBJECTID ( ) .)
    CHAR_CONST      reduce using rule 12 (Expression -> OBJECTID ( ) .)
    INT_CONST       reduce using rule 12 (Expression -> OBJECTID ( ) .)
    IF              reduce using rule 12 (Expression -> OBJECTID ( ) .)
    PRINT           reduce using rule 12 (Expression -> OBJECTID ( ) .)
    RETURN          reduce using rule 12 (Expression -> OBJECTID ( ) .)
    WHILE           reduce using rule 12 (Expression -> OBJECTID ( ) .)
    VOID            reduce using rule 12 (Expression -> OBJECTID ( ) .)
    DOUBLE          reduce using rule 12 (Expression -> OBJECTID ( ) .)
    FLOAT           reduce using rule 12 (Expression -> OBJECTID ( ) .)
    CHAR            reduce using rule 12 (Expression -> OBJECTID ( ) .)
    INT             reduce using rule 12 (Expression -> OBJECTID ( ) .)
    $end            reduce using rule 12 (Expression -> OBJECTID ( ) .)
    }               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    )               reduce using rule 12 (Expression -> OBJECTID ( ) .)
    ,               reduce using rule 12 (Expression -> OBJECTID ( ) .)


state 66

    (57) listaExpresiones -> Expression . , listaExpresiones
    (58) listaExpresiones -> Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ,               shift and go to state 78
    )               reduce using rule 58 (listaExpresiones -> Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 67

    (32) Expression -> OBJECTID = Expression . ;
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               shift and go to state 79
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 68

    (22) Expression -> ( Expression ) .
    ;               reduce using rule 22 (Expression -> ( Expression ) .)
    OR              reduce using rule 22 (Expression -> ( Expression ) .)
    AND             reduce using rule 22 (Expression -> ( Expression ) .)
    NE              reduce using rule 22 (Expression -> ( Expression ) .)
    EQ              reduce using rule 22 (Expression -> ( Expression ) .)
    GE              reduce using rule 22 (Expression -> ( Expression ) .)
    >               reduce using rule 22 (Expression -> ( Expression ) .)
    LE              reduce using rule 22 (Expression -> ( Expression ) .)
    <               reduce using rule 22 (Expression -> ( Expression ) .)
    /               reduce using rule 22 (Expression -> ( Expression ) .)
    *               reduce using rule 22 (Expression -> ( Expression ) .)
    -               reduce using rule 22 (Expression -> ( Expression ) .)
    +               reduce using rule 22 (Expression -> ( Expression ) .)
    OBJECTID        reduce using rule 22 (Expression -> ( Expression ) .)
    !               reduce using rule 22 (Expression -> ( Expression ) .)
    (               reduce using rule 22 (Expression -> ( Expression ) .)
    BREAK           reduce using rule 22 (Expression -> ( Expression ) .)
    FLOAT_CONST     reduce using rule 22 (Expression -> ( Expression ) .)
    CHAR_CONST      reduce using rule 22 (Expression -> ( Expression ) .)
    INT_CONST       reduce using rule 22 (Expression -> ( Expression ) .)
    IF              reduce using rule 22 (Expression -> ( Expression ) .)
    PRINT           reduce using rule 22 (Expression -> ( Expression ) .)
    RETURN          reduce using rule 22 (Expression -> ( Expression ) .)
    WHILE           reduce using rule 22 (Expression -> ( Expression ) .)
    VOID            reduce using rule 22 (Expression -> ( Expression ) .)
    DOUBLE          reduce using rule 22 (Expression -> ( Expression ) .)
    FLOAT           reduce using rule 22 (Expression -> ( Expression ) .)
    CHAR            reduce using rule 22 (Expression -> ( Expression ) .)
    INT             reduce using rule 22 (Expression -> ( Expression ) .)
    $end            reduce using rule 22 (Expression -> ( Expression ) .)
    }               reduce using rule 22 (Expression -> ( Expression ) .)
    )               reduce using rule 22 (Expression -> ( Expression ) .)
    ,               reduce using rule 22 (Expression -> ( Expression ) .)


state 69

    (33) Expression -> tipo OBJECTID . optAssign
    (55) optAssign -> . = Expression
    (56) optAssign -> .
    =               shift and go to state 72
    OR              reduce using rule 56 (optAssign -> .)
    AND             reduce using rule 56 (optAssign -> .)
    NE              reduce using rule 56 (optAssign -> .)
    EQ              reduce using rule 56 (optAssign -> .)
    GE              reduce using rule 56 (optAssign -> .)
    >               reduce using rule 56 (optAssign -> .)
    LE              reduce using rule 56 (optAssign -> .)
    <               reduce using rule 56 (optAssign -> .)
    /               reduce using rule 56 (optAssign -> .)
    *               reduce using rule 56 (optAssign -> .)
    -               reduce using rule 56 (optAssign -> .)
    +               reduce using rule 56 (optAssign -> .)
    ;               reduce using rule 56 (optAssign -> .)
    OBJECTID        reduce using rule 56 (optAssign -> .)
    !               reduce using rule 56 (optAssign -> .)
    (               reduce using rule 56 (optAssign -> .)
    BREAK           reduce using rule 56 (optAssign -> .)
    FLOAT_CONST     reduce using rule 56 (optAssign -> .)
    CHAR_CONST      reduce using rule 56 (optAssign -> .)
    INT_CONST       reduce using rule 56 (optAssign -> .)
    IF              reduce using rule 56 (optAssign -> .)
    PRINT           reduce using rule 56 (optAssign -> .)
    RETURN          reduce using rule 56 (optAssign -> .)
    WHILE           reduce using rule 56 (optAssign -> .)
    VOID            reduce using rule 56 (optAssign -> .)
    DOUBLE          reduce using rule 56 (optAssign -> .)
    FLOAT           reduce using rule 56 (optAssign -> .)
    CHAR            reduce using rule 56 (optAssign -> .)
    INT             reduce using rule 56 (optAssign -> .)
    $end            reduce using rule 56 (optAssign -> .)
    }               reduce using rule 56 (optAssign -> .)
    )               reduce using rule 56 (optAssign -> .)
    ,               reduce using rule 56 (optAssign -> .)

    optAssign                      shift and go to state 70

state 70

    (33) Expression -> tipo OBJECTID optAssign .
    ;               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    OR              reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    AND             reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    NE              reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    EQ              reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    GE              reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    >               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    LE              reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    <               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    /               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    *               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    -               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    +               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    OBJECTID        reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    !               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    (               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    BREAK           reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    FLOAT_CONST     reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    CHAR_CONST      reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    INT_CONST       reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    IF              reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    PRINT           reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    RETURN          reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    WHILE           reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    VOID            reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    DOUBLE          reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    FLOAT           reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    CHAR            reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    INT             reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    $end            reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    }               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    )               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)
    ,               reduce using rule 33 (Expression -> tipo OBJECTID optAssign .)


state 71

    (39) Metodo -> tipo OBJECTID ( . listaFormales ) { listLineas }
    (40) Metodo -> tipo OBJECTID ( . ) { listLineas }
    (46) listaFormales -> . Formal , listaFormales
    (47) listaFormales -> . Formal
    (48) Formal -> . tipo OBJECTID
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    )               shift and go to state 82
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    tipo                           shift and go to state 80
    listaFormales                  shift and go to state 81
    Formal                         shift and go to state 83

state 72

    (55) optAssign -> = . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 84
    tipo                           shift and go to state 43

state 73

    (34) Expression -> IF ( Expression . ) { listLineas }
    (35) Expression -> IF ( Expression . ) { listLineas } Continuacion
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    )               shift and go to state 85
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 74

    (51) Imprimir -> PRINT ( STRING . argumentos ) ;
    (52) Imprimir -> PRINT ( STRING . ) ;
    (53) argumentos -> . , Expression argumentos
    (54) argumentos -> . , Expression
    )               shift and go to state 87
    ,               shift and go to state 88

    argumentos                     shift and go to state 86

state 75

    (50) Retorno -> RETURN Expression ; .
    OBJECTID        reduce using rule 50 (Retorno -> RETURN Expression ; .)
    !               reduce using rule 50 (Retorno -> RETURN Expression ; .)
    (               reduce using rule 50 (Retorno -> RETURN Expression ; .)
    BREAK           reduce using rule 50 (Retorno -> RETURN Expression ; .)
    FLOAT_CONST     reduce using rule 50 (Retorno -> RETURN Expression ; .)
    CHAR_CONST      reduce using rule 50 (Retorno -> RETURN Expression ; .)
    INT_CONST       reduce using rule 50 (Retorno -> RETURN Expression ; .)
    IF              reduce using rule 50 (Retorno -> RETURN Expression ; .)
    PRINT           reduce using rule 50 (Retorno -> RETURN Expression ; .)
    RETURN          reduce using rule 50 (Retorno -> RETURN Expression ; .)
    WHILE           reduce using rule 50 (Retorno -> RETURN Expression ; .)
    VOID            reduce using rule 50 (Retorno -> RETURN Expression ; .)
    DOUBLE          reduce using rule 50 (Retorno -> RETURN Expression ; .)
    FLOAT           reduce using rule 50 (Retorno -> RETURN Expression ; .)
    CHAR            reduce using rule 50 (Retorno -> RETURN Expression ; .)
    INT             reduce using rule 50 (Retorno -> RETURN Expression ; .)
    $end            reduce using rule 50 (Retorno -> RETURN Expression ; .)
    }               reduce using rule 50 (Retorno -> RETURN Expression ; .)


state 76

    (10) Bucle -> WHILE ( Expression . ) { listLineas }
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    )               shift and go to state 89
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 77

    (11) Expression -> OBJECTID ( listaExpresiones ) .
    ;               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    OR              reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    AND             reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    NE              reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    EQ              reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    GE              reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    >               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    LE              reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    <               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    /               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    *               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    -               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    +               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    OBJECTID        reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    !               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    (               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    BREAK           reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    FLOAT_CONST     reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    CHAR_CONST      reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    INT_CONST       reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    IF              reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    PRINT           reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    RETURN          reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    WHILE           reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    VOID            reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    DOUBLE          reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    FLOAT           reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    CHAR            reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    INT             reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    $end            reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    }               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    )               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)
    ,               reduce using rule 11 (Expression -> OBJECTID ( listaExpresiones ) .)


state 78

    (57) listaExpresiones -> Expression , . listaExpresiones
    (57) listaExpresiones -> . Expression , listaExpresiones
    (58) listaExpresiones -> . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 66
    listaExpresiones               shift and go to state 90
    tipo                           shift and go to state 43

state 79

    (32) Expression -> OBJECTID = Expression ; .
    ;               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    OR              reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    AND             reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    NE              reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    EQ              reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    GE              reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    >               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    LE              reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    <               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    /               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    *               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    -               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    +               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    OBJECTID        reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    !               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    (               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    BREAK           reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    FLOAT_CONST     reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    CHAR_CONST      reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    INT_CONST       reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    IF              reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    PRINT           reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    RETURN          reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    WHILE           reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    VOID            reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    DOUBLE          reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    FLOAT           reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    CHAR            reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    INT             reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    $end            reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    }               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    )               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)
    ,               reduce using rule 32 (Expression -> OBJECTID = Expression ; .)


state 80

    (48) Formal -> tipo . OBJECTID
    OBJECTID        shift and go to state 91


state 81

    (39) Metodo -> tipo OBJECTID ( listaFormales . ) { listLineas }
    )               shift and go to state 92


state 82

    (40) Metodo -> tipo OBJECTID ( ) . { listLineas }
    {               shift and go to state 93


state 83

    (46) listaFormales -> Formal . , listaFormales
    (47) listaFormales -> Formal .
    ,               shift and go to state 94
    )               reduce using rule 47 (listaFormales -> Formal .)


state 84

    (55) optAssign -> = Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    ;               reduce using rule 55 (optAssign -> = Expression .)
    OR              reduce using rule 55 (optAssign -> = Expression .)
    AND             reduce using rule 55 (optAssign -> = Expression .)
    NE              reduce using rule 55 (optAssign -> = Expression .)
    EQ              reduce using rule 55 (optAssign -> = Expression .)
    GE              reduce using rule 55 (optAssign -> = Expression .)
    >               reduce using rule 55 (optAssign -> = Expression .)
    LE              reduce using rule 55 (optAssign -> = Expression .)
    <               reduce using rule 55 (optAssign -> = Expression .)
    OBJECTID        reduce using rule 55 (optAssign -> = Expression .)
    !               reduce using rule 55 (optAssign -> = Expression .)
    (               reduce using rule 55 (optAssign -> = Expression .)
    BREAK           reduce using rule 55 (optAssign -> = Expression .)
    FLOAT_CONST     reduce using rule 55 (optAssign -> = Expression .)
    CHAR_CONST      reduce using rule 55 (optAssign -> = Expression .)
    INT_CONST       reduce using rule 55 (optAssign -> = Expression .)
    IF              reduce using rule 55 (optAssign -> = Expression .)
    PRINT           reduce using rule 55 (optAssign -> = Expression .)
    RETURN          reduce using rule 55 (optAssign -> = Expression .)
    WHILE           reduce using rule 55 (optAssign -> = Expression .)
    VOID            reduce using rule 55 (optAssign -> = Expression .)
    DOUBLE          reduce using rule 55 (optAssign -> = Expression .)
    FLOAT           reduce using rule 55 (optAssign -> = Expression .)
    CHAR            reduce using rule 55 (optAssign -> = Expression .)
    INT             reduce using rule 55 (optAssign -> = Expression .)
    $end            reduce using rule 55 (optAssign -> = Expression .)
    }               reduce using rule 55 (optAssign -> = Expression .)
    )               reduce using rule 55 (optAssign -> = Expression .)
    ,               reduce using rule 55 (optAssign -> = Expression .)
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 85

    (34) Expression -> IF ( Expression ) . { listLineas }
    (35) Expression -> IF ( Expression ) . { listLineas } Continuacion
    {               shift and go to state 95


state 86

    (51) Imprimir -> PRINT ( STRING argumentos . ) ;
    )               shift and go to state 96


state 87

    (52) Imprimir -> PRINT ( STRING ) . ;
    ;               shift and go to state 97


state 88

    (53) argumentos -> , . Expression argumentos
    (54) argumentos -> , . Expression
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 98
    tipo                           shift and go to state 43

state 89

    (10) Bucle -> WHILE ( Expression ) . { listLineas }
    {               shift and go to state 99


state 90

    (57) listaExpresiones -> Expression , listaExpresiones .
    )               reduce using rule 57 (listaExpresiones -> Expression , listaExpresiones .)


state 91

    (48) Formal -> tipo OBJECTID .
    ,               reduce using rule 48 (Formal -> tipo OBJECTID .)
    )               reduce using rule 48 (Formal -> tipo OBJECTID .)


state 92

    (39) Metodo -> tipo OBJECTID ( listaFormales ) . { listLineas }
    {               shift and go to state 100


state 93

    (40) Metodo -> tipo OBJECTID ( ) { . listLineas }
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    tipo                           shift and go to state 16
    listLineas                     shift and go to state 101
    Linea                          shift and go to state 3
    Expression                     shift and go to state 4
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8

state 94

    (46) listaFormales -> Formal , . listaFormales
    (46) listaFormales -> . Formal , listaFormales
    (47) listaFormales -> . Formal
    (48) Formal -> . tipo OBJECTID
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Formal                         shift and go to state 83
    listaFormales                  shift and go to state 102
    tipo                           shift and go to state 80

state 95

    (34) Expression -> IF ( Expression ) { . listLineas }
    (35) Expression -> IF ( Expression ) { . listLineas } Continuacion
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 4
    listLineas                     shift and go to state 103
    Linea                          shift and go to state 3
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8
    tipo                           shift and go to state 16

state 96

    (51) Imprimir -> PRINT ( STRING argumentos ) . ;
    ;               shift and go to state 104


state 97

    (52) Imprimir -> PRINT ( STRING ) ; .
    OBJECTID        reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    !               reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    (               reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    BREAK           reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    FLOAT_CONST     reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    CHAR_CONST      reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    INT_CONST       reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    IF              reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    PRINT           reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    RETURN          reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    WHILE           reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    VOID            reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    DOUBLE          reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    FLOAT           reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    CHAR            reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    INT             reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    $end            reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)
    }               reduce using rule 52 (Imprimir -> PRINT ( STRING ) ; .)


state 98

    (53) argumentos -> , Expression . argumentos
    (54) argumentos -> , Expression .
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    (53) argumentos -> . , Expression argumentos
    (54) argumentos -> . , Expression
    )               reduce using rule 54 (argumentos -> , Expression .)
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    ,               shift and go to state 88

    argumentos                     shift and go to state 105

state 99

    (10) Bucle -> WHILE ( Expression ) { . listLineas }
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 4
    listLineas                     shift and go to state 106
    Linea                          shift and go to state 3
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8
    tipo                           shift and go to state 16

state 100

    (39) Metodo -> tipo OBJECTID ( listaFormales ) { . listLineas }
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    tipo                           shift and go to state 16
    listLineas                     shift and go to state 107
    Linea                          shift and go to state 3
    Expression                     shift and go to state 4
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8

state 101

    (40) Metodo -> tipo OBJECTID ( ) { listLineas . }
    }               shift and go to state 108


state 102

    (46) listaFormales -> Formal , listaFormales .
    )               reduce using rule 46 (listaFormales -> Formal , listaFormales .)


state 103

    (34) Expression -> IF ( Expression ) { listLineas . }
    (35) Expression -> IF ( Expression ) { listLineas . } Continuacion
    }               shift and go to state 109


state 104

    (51) Imprimir -> PRINT ( STRING argumentos ) ; .
    OBJECTID        reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    !               reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    (               reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    BREAK           reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    FLOAT_CONST     reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    CHAR_CONST      reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    INT_CONST       reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    IF              reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    PRINT           reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    RETURN          reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    WHILE           reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    VOID            reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    DOUBLE          reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    FLOAT           reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    CHAR            reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    INT             reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    $end            reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)
    }               reduce using rule 51 (Imprimir -> PRINT ( STRING argumentos ) ; .)


state 105

    (53) argumentos -> , Expression argumentos .
    )               reduce using rule 53 (argumentos -> , Expression argumentos .)


state 106

    (10) Bucle -> WHILE ( Expression ) { listLineas . }
    }               shift and go to state 110


state 107

    (39) Metodo -> tipo OBJECTID ( listaFormales ) { listLineas . }
    }               shift and go to state 111


state 108

    (40) Metodo -> tipo OBJECTID ( ) { listLineas } .
    OBJECTID        reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    !               reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    (               reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    BREAK           reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    FLOAT_CONST     reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    CHAR_CONST      reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    INT_CONST       reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    IF              reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    PRINT           reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    RETURN          reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    WHILE           reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    VOID            reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    DOUBLE          reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    FLOAT           reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    CHAR            reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    INT             reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    $end            reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)
    }               reduce using rule 40 (Metodo -> tipo OBJECTID ( ) { listLineas } .)


state 109

    (34) Expression -> IF ( Expression ) { listLineas } .
    (35) Expression -> IF ( Expression ) { listLineas } . Continuacion
    (36) Continuacion -> . ELSE { listLineas }
    (37) Continuacion -> . ELSE IF ( Expression ) { listLineas } Continuacion
    (38) Continuacion -> . ELSE IF ( Expression ) { listLineas }
    ;               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    OR              reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    AND             reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    NE              reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    EQ              reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    GE              reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    >               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    LE              reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    <               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    /               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    *               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    -               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    +               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    OBJECTID        reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    !               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    (               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    BREAK           reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    FLOAT_CONST     reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    CHAR_CONST      reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    INT_CONST       reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    IF              reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    PRINT           reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    RETURN          reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    WHILE           reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    VOID            reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    DOUBLE          reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    FLOAT           reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    CHAR            reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    INT             reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    $end            reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    }               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    )               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    ,               reduce using rule 34 (Expression -> IF ( Expression ) { listLineas } .)
    ELSE            shift and go to state 113

    Continuacion                   shift and go to state 112

state 110

    (10) Bucle -> WHILE ( Expression ) { listLineas } .
    OBJECTID        reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    !               reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    (               reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    BREAK           reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    FLOAT_CONST     reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    CHAR_CONST      reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    INT_CONST       reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    IF              reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    PRINT           reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    RETURN          reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    WHILE           reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    VOID            reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    DOUBLE          reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    FLOAT           reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    CHAR            reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    INT             reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    $end            reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)
    }               reduce using rule 10 (Bucle -> WHILE ( Expression ) { listLineas } .)


state 111

    (39) Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .
    OBJECTID        reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    !               reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    (               reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    BREAK           reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    FLOAT_CONST     reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    CHAR_CONST      reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    INT_CONST       reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    IF              reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    PRINT           reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    RETURN          reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    WHILE           reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    VOID            reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    DOUBLE          reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    FLOAT           reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    CHAR            reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    INT             reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    $end            reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)
    }               reduce using rule 39 (Metodo -> tipo OBJECTID ( listaFormales ) { listLineas } .)


state 112

    (35) Expression -> IF ( Expression ) { listLineas } Continuacion .
    ;               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    OR              reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    AND             reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    NE              reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    EQ              reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    GE              reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    >               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    LE              reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    <               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    /               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    *               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    -               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    +               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    OBJECTID        reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    !               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    (               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    BREAK           reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    FLOAT_CONST     reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    CHAR_CONST      reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    INT_CONST       reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    IF              reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    PRINT           reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    RETURN          reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    WHILE           reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    VOID            reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    DOUBLE          reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    FLOAT           reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    CHAR            reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    INT             reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    $end            reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    }               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    )               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)
    ,               reduce using rule 35 (Expression -> IF ( Expression ) { listLineas } Continuacion .)


state 113

    (36) Continuacion -> ELSE . { listLineas }
    (37) Continuacion -> ELSE . IF ( Expression ) { listLineas } Continuacion
    (38) Continuacion -> ELSE . IF ( Expression ) { listLineas }
    {               shift and go to state 114
    IF              shift and go to state 115


state 114

    (36) Continuacion -> ELSE { . listLineas }
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    listLineas                     shift and go to state 116
    Linea                          shift and go to state 3
    Expression                     shift and go to state 4
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8
    tipo                           shift and go to state 16

state 115

    (37) Continuacion -> ELSE IF . ( Expression ) { listLineas } Continuacion
    (38) Continuacion -> ELSE IF . ( Expression ) { listLineas }
    (               shift and go to state 117


state 116

    (36) Continuacion -> ELSE { listLineas . }
    }               shift and go to state 118


state 117

    (37) Continuacion -> ELSE IF ( . Expression ) { listLineas } Continuacion
    (38) Continuacion -> ELSE IF ( . Expression ) { listLineas }
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 119
    tipo                           shift and go to state 43

state 118

    (36) Continuacion -> ELSE { listLineas } .
    ;               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    OR              reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    AND             reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    NE              reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    EQ              reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    GE              reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    >               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    LE              reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    <               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    /               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    *               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    -               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    +               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    OBJECTID        reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    !               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    (               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    BREAK           reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    FLOAT_CONST     reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    CHAR_CONST      reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    INT_CONST       reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    IF              reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    PRINT           reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    RETURN          reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    WHILE           reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    VOID            reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    DOUBLE          reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    FLOAT           reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    CHAR            reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    INT             reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    $end            reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    }               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    )               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)
    ,               reduce using rule 36 (Continuacion -> ELSE { listLineas } .)


state 119

    (37) Continuacion -> ELSE IF ( Expression . ) { listLineas } Continuacion
    (38) Continuacion -> ELSE IF ( Expression . ) { listLineas }
    (13) Expression -> Expression . OR Expression
    (14) Expression -> Expression . AND Expression
    (16) Expression -> Expression . NE Expression
    (17) Expression -> Expression . EQ Expression
    (18) Expression -> Expression . GE Expression
    (19) Expression -> Expression . > Expression
    (20) Expression -> Expression . LE Expression
    (21) Expression -> Expression . < Expression
    (24) Expression -> Expression . / Expression
    (25) Expression -> Expression . * Expression
    (26) Expression -> Expression . - Expression
    (27) Expression -> Expression . + Expression
    )               shift and go to state 120
    OR              shift and go to state 28
    AND             shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    >               shift and go to state 33
    LE              shift and go to state 34
    <               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 120

    (37) Continuacion -> ELSE IF ( Expression ) . { listLineas } Continuacion
    (38) Continuacion -> ELSE IF ( Expression ) . { listLineas }
    {               shift and go to state 121


state 121

    (37) Continuacion -> ELSE IF ( Expression ) { . listLineas } Continuacion
    (38) Continuacion -> ELSE IF ( Expression ) { . listLineas }
    (2) listLineas -> . Linea
    (3) listLineas -> . Linea listLineas
    (4) Linea -> . Expression
    (5) Linea -> . Expression ;
    (6) Linea -> . Imprimir
    (7) Linea -> . Retorno
    (8) Linea -> . Metodo
    (9) Linea -> . Bucle
    (11) Expression -> . OBJECTID ( listaExpresiones )
    (12) Expression -> . OBJECTID ( )
    (13) Expression -> . Expression OR Expression
    (14) Expression -> . Expression AND Expression
    (15) Expression -> . ! Expression
    (16) Expression -> . Expression NE Expression
    (17) Expression -> . Expression EQ Expression
    (18) Expression -> . Expression GE Expression
    (19) Expression -> . Expression > Expression
    (20) Expression -> . Expression LE Expression
    (21) Expression -> . Expression < Expression
    (22) Expression -> . ( Expression )
    (23) Expression -> . BREAK ;
    (24) Expression -> . Expression / Expression
    (25) Expression -> . Expression * Expression
    (26) Expression -> . Expression - Expression
    (27) Expression -> . Expression + Expression
    (28) Expression -> . FLOAT_CONST
    (29) Expression -> . CHAR_CONST
    (30) Expression -> . INT_CONST
    (31) Expression -> . OBJECTID
    (32) Expression -> . OBJECTID = Expression ;
    (33) Expression -> . tipo OBJECTID optAssign
    (34) Expression -> . IF ( Expression ) { listLineas }
    (35) Expression -> . IF ( Expression ) { listLineas } Continuacion
    (51) Imprimir -> . PRINT ( STRING argumentos ) ;
    (52) Imprimir -> . PRINT ( STRING ) ;
    (49) Retorno -> . RETURN ;
    (50) Retorno -> . RETURN Expression ;
    (39) Metodo -> . tipo OBJECTID ( listaFormales ) { listLineas }
    (40) Metodo -> . tipo OBJECTID ( ) { listLineas }
    (10) Bucle -> . WHILE ( Expression ) { listLineas }
    (41) tipo -> . VOID
    (42) tipo -> . DOUBLE
    (43) tipo -> . FLOAT
    (44) tipo -> . CHAR
    (45) tipo -> . INT
    OBJECTID        shift and go to state 9
    !               shift and go to state 11
    (               shift and go to state 10
    BREAK           shift and go to state 12
    FLOAT_CONST     shift and go to state 13
    CHAR_CONST      shift and go to state 14
    INT_CONST       shift and go to state 15
    IF              shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    VOID            shift and go to state 21
    DOUBLE          shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    INT             shift and go to state 25

    Expression                     shift and go to state 4
    listLineas                     shift and go to state 122
    Linea                          shift and go to state 3
    Imprimir                       shift and go to state 5
    Retorno                        shift and go to state 6
    Metodo                         shift and go to state 7
    Bucle                          shift and go to state 8
    tipo                           shift and go to state 16

state 122

    (37) Continuacion -> ELSE IF ( Expression ) { listLineas . } Continuacion
    (38) Continuacion -> ELSE IF ( Expression ) { listLineas . }
    }               shift and go to state 123


state 123

    (37) Continuacion -> ELSE IF ( Expression ) { listLineas } . Continuacion
    (38) Continuacion -> ELSE IF ( Expression ) { listLineas } .
    (36) Continuacion -> . ELSE { listLineas }
    (37) Continuacion -> . ELSE IF ( Expression ) { listLineas } Continuacion
    (38) Continuacion -> . ELSE IF ( Expression ) { listLineas }
    ;               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    OR              reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    AND             reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    NE              reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    EQ              reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    GE              reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    >               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    LE              reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    <               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    /               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    *               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    -               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    +               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    OBJECTID        reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    !               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    (               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    BREAK           reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    FLOAT_CONST     reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    CHAR_CONST      reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    INT_CONST       reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    IF              reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    PRINT           reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    RETURN          reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    WHILE           reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    VOID            reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    DOUBLE          reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    FLOAT           reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    CHAR            reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    INT             reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    $end            reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    }               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    )               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    ,               reduce using rule 38 (Continuacion -> ELSE IF ( Expression ) { listLineas } .)
    ELSE            shift and go to state 113

    Continuacion                   shift and go to state 124

state 124

    (37) Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .
    ;               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    OR              reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    AND             reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    NE              reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    EQ              reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    GE              reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    >               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    LE              reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    <               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    /               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    *               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    -               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    +               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    OBJECTID        reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    !               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    (               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    BREAK           reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    FLOAT_CONST     reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    CHAR_CONST      reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    INT_CONST       reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    IF              reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    PRINT           reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    RETURN          reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    WHILE           reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    VOID            reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    DOUBLE          reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    FLOAT           reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    CHAR            reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    INT             reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    $end            reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    }               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    )               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)
    ,               reduce using rule 37 (Continuacion -> ELSE IF ( Expression ) { listLineas } Continuacion .)


Conflicts:

shift/reduce conflict for ( in state 9 resolved as shift
shift/reduce conflict for OR in state 44 resolved as shift
shift/reduce conflict for AND in state 44 resolved as shift
shift/reduce conflict for NE in state 44 resolved as shift
shift/reduce conflict for EQ in state 44 resolved as shift
shift/reduce conflict for GE in state 44 resolved as shift
shift/reduce conflict for > in state 44 resolved as shift
shift/reduce conflict for LE in state 44 resolved as shift
shift/reduce conflict for < in state 44 resolved as shift
shift/reduce conflict for / in state 44 resolved as shift
shift/reduce conflict for * in state 44 resolved as shift
shift/reduce conflict for - in state 44 resolved as shift
shift/reduce conflict for + in state 44 resolved as shift
shift/reduce conflict for ( in state 46 resolved as shift
shift/reduce conflict for OR in state 52 resolved as shift
shift/reduce conflict for AND in state 52 resolved as shift
shift/reduce conflict for NE in state 52 resolved as shift
shift/reduce conflict for EQ in state 52 resolved as shift
shift/reduce conflict for GE in state 52 resolved as shift
shift/reduce conflict for > in state 52 resolved as shift
shift/reduce conflict for LE in state 52 resolved as shift
shift/reduce conflict for < in state 52 resolved as shift
shift/reduce conflict for / in state 52 resolved as shift
shift/reduce conflict for * in state 52 resolved as shift
shift/reduce conflict for - in state 52 resolved as shift
shift/reduce conflict for + in state 52 resolved as shift
shift/reduce conflict for OR in state 53 resolved as shift
shift/reduce conflict for AND in state 53 resolved as shift
shift/reduce conflict for NE in state 53 resolved as shift
shift/reduce conflict for EQ in state 53 resolved as shift
shift/reduce conflict for GE in state 53 resolved as shift
shift/reduce conflict for > in state 53 resolved as shift
shift/reduce conflict for LE in state 53 resolved as shift
shift/reduce conflict for < in state 53 resolved as shift
shift/reduce conflict for / in state 53 resolved as shift
shift/reduce conflict for * in state 53 resolved as shift
shift/reduce conflict for - in state 53 resolved as shift
shift/reduce conflict for + in state 53 resolved as shift
shift/reduce conflict for OR in state 54 resolved as shift
shift/reduce conflict for AND in state 54 resolved as shift
shift/reduce conflict for NE in state 54 resolved as shift
shift/reduce conflict for EQ in state 54 resolved as shift
shift/reduce conflict for GE in state 54 resolved as shift
shift/reduce conflict for > in state 54 resolved as shift
shift/reduce conflict for LE in state 54 resolved as shift
shift/reduce conflict for < in state 54 resolved as shift
shift/reduce conflict for / in state 54 resolved as shift
shift/reduce conflict for * in state 54 resolved as shift
shift/reduce conflict for - in state 54 resolved as shift
shift/reduce conflict for + in state 54 resolved as shift
shift/reduce conflict for OR in state 55 resolved as shift
shift/reduce conflict for AND in state 55 resolved as shift
shift/reduce conflict for NE in state 55 resolved as shift
shift/reduce conflict for EQ in state 55 resolved as shift
shift/reduce conflict for GE in state 55 resolved as shift
shift/reduce conflict for > in state 55 resolved as shift
shift/reduce conflict for LE in state 55 resolved as shift
shift/reduce conflict for < in state 55 resolved as shift
shift/reduce conflict for / in state 55 resolved as shift
shift/reduce conflict for * in state 55 resolved as shift
shift/reduce conflict for - in state 55 resolved as shift
shift/reduce conflict for + in state 55 resolved as shift
shift/reduce conflict for OR in state 56 resolved as shift
shift/reduce conflict for AND in state 56 resolved as shift
shift/reduce conflict for NE in state 56 resolved as shift
shift/reduce conflict for EQ in state 56 resolved as shift
shift/reduce conflict for GE in state 56 resolved as shift
shift/reduce conflict for > in state 56 resolved as shift
shift/reduce conflict for LE in state 56 resolved as shift
shift/reduce conflict for < in state 56 resolved as shift
shift/reduce conflict for / in state 56 resolved as shift
shift/reduce conflict for * in state 56 resolved as shift
shift/reduce conflict for - in state 56 resolved as shift
shift/reduce conflict for + in state 56 resolved as shift
shift/reduce conflict for OR in state 57 resolved as shift
shift/reduce conflict for AND in state 57 resolved as shift
shift/reduce conflict for NE in state 57 resolved as shift
shift/reduce conflict for EQ in state 57 resolved as shift
shift/reduce conflict for GE in state 57 resolved as shift
shift/reduce conflict for > in state 57 resolved as shift
shift/reduce conflict for LE in state 57 resolved as shift
shift/reduce conflict for < in state 57 resolved as shift
shift/reduce conflict for / in state 57 resolved as shift
shift/reduce conflict for * in state 57 resolved as shift
shift/reduce conflict for - in state 57 resolved as shift
shift/reduce conflict for + in state 57 resolved as shift
shift/reduce conflict for OR in state 58 resolved as shift
shift/reduce conflict for AND in state 58 resolved as shift
shift/reduce conflict for NE in state 58 resolved as shift
shift/reduce conflict for EQ in state 58 resolved as shift
shift/reduce conflict for GE in state 58 resolved as shift
shift/reduce conflict for > in state 58 resolved as shift
shift/reduce conflict for LE in state 58 resolved as shift
shift/reduce conflict for < in state 58 resolved as shift
shift/reduce conflict for / in state 58 resolved as shift
shift/reduce conflict for * in state 58 resolved as shift
shift/reduce conflict for - in state 58 resolved as shift
shift/reduce conflict for + in state 58 resolved as shift